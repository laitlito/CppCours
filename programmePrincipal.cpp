// Fichier dans lequel vous écrirez les expressions à évaluer
#include "definitionsFonctions.cpp"
#define EVAL(exp) cout << "Valeur de " << (#exp) <<" : "<< (exp) << endl

int main()
{
  srand(time(NULL));
  boolalpha(cout);

  cout << "\n=================================================================\n ";

  EVAL( 3+4 );
  EVAL( true || false );
  EVAL( abs(2) );
  EVAL( 8/2 );
  EVAL( 9/2 );
  EVAL( 8%4 );
  EVAL( 9%4 );
  EVAL( 8.5+1 );
  EVAL( 8.2/4.1 );
  EVAL( 8.2/2 );
  EVAL(pow( 3,2 ));
  EVAL(sqrt( 25 ));
  EVAL(sqrt( pow( 12.3,2 )));
  EVAL( true );
  EVAL( 2 > 3);
  EVAL( !( 2 > 3) );
  EVAL(( 2 > 3 ) && true);
  EVAL(( 2 > 3 ) || true);
  EVAL(true || ((2/0)>1));
  EVAL(2>3 ? 5 : 7);
  EVAL(sqrt(2)>1.4 ? 5 : 7);
  EVAL(moyenne(2.3 , 8));
  cout << "\n=================================================================\n ";
  EVAL(max3(19 , 2 , 100000000000000));
  EVAL(multiple(2, 0));
  EVAL(triangleEqui(3, 3, 3));
  EVAL(triangleIso(3, 3, 2));
  EVAL(triangle(1000, 3, 13));
  EVAL(memeParite(2, 8));
  EVAL(memeDizaine(303, 399));
  EVAL(memeDizaine(30, 39));
  EVAL(gainRoulette(100, 675, 500));
  EVAL(gainRoulette(10, 12, 18));
  EVAL(gainRoulette(100, 675, 672));
  EVAL(gainRoulette(100,675,675));
  EVAL(estPair(9));
  EVAL(estPair(56));
  EVAL(estPair(-2));
  EVAL(existeMul11(2, 10));
  EVAL(existeMul11(22, 22));
  EVAL(existeMul11(22, 2));
  EVAL(maxMul11(3, 43));
  EVAL(maxMul11(3, 4));
  EVAL(nbMul11(3, 43));
  EVAL(nbMul11(3, 4));
  EVAL(somMul11(3, 54));
  EVAL(somMul11(3, 4));
  EVAL(nbChifDec(4));
  EVAL(nbChifDec(3249));
  EVAL(chifRang(34682, 4));
  EVAL(somChif(238787284));
  EVAL(racNum(1345));
  EVAL(racNum(13714728));
  EVAL(invChif(1135784));
  EVAL(estCarre(64));
  EVAL(estCarre(132));
  cout << "\n=================================================================\n ";
  const list<int> exli={1,33,67,12,1,22};
  EVAL(exli);
  EVAL(tete(exli));
  EVAL(queue(exli));
  EVAL(tete(queue(exli)));
  EVAL(queue(queue(exli)));
  EVAL(cons(11,liVide<int>()));
  EVAL(cons(11, exli));
  EVAL((tete(exli)+tete(queue(exli))));
  EVAL(cons(34, queue(queue(exli))));
  EVAL(cons(tete(exli), queue(queue(exli))));
  EVAL(liste({1, 2, 3}));
    cout << "\n=================================================================\n ";
  EVAL(li({2, 4, 4, 5, 9}));
  EVAL(longLi(exli));
  EVAL(longLi({3, 3, 3, 5, 1, 1, 1, 1, 1, 1, 4}));
  EVAL(minLi(exli));
  EVAL(minLi({2,1}));
  EVAL(minLi({3, 4, 5, 2, 1}));
  EVAL(minLi({3, 5, 4, 7, 94}));
  EVAL(minLi({}));
  EVAL(existeLi(exli, 4));
  EVAL(existeLi(exli, 1));
  EVAL(oterLi(exli, 1));
  EVAL(oterLi(exli, 67));
  EVAL(oterLi(exli, 9));
  EVAL(estTriee(exli));
  EVAL(estTriee({1, 2, 4}));
  EVAL(estTriee({3, 4, 6, 7, 9, 100}));
  EVAL(estTriee({3, 4, 6, 7, 9, 100, 1}));
  EVAL(lgPrefEg(exli));
  EVAL(lgPrefEg({2, 2, 2, 2, 4, 5}));
  EVAL(lgPrefEg({2, 7, 7, 2}));
  EVAL(lgPrefEg({2, 2, 2, 7, 2}));
  EVAL(suppRepet({2, 7, 7, 7, 2}));
  EVAL(suppPrefEg({2, 7, 7, 2}));
  EVAL(codeLi({7, 7, 7, 7, 8, 8, 7, 7, 7}));
  EVAL(decodeLi({3, 7, 2, 1, 1, 2}));*/
  somCarre();
  sommeNpremiers();
  somme2n();
  somfrac();
  sommeDiv();
  factorielle();
  puissance();
  tantQueSomme2();
  tantQueSommeFrac();
  floorPositif();
  ceilPositif();
  estPremier();
  niemeMultiple();
  mystere();
  nbRacinesEtSoultionsReelles();
  sommeNpremiersV2();
  sommePair();
  sommeImpair();
  sommeDivV2();
  EVAL(estParf(6));
  EVAL(existeParfait(10, 200000000));
  EVAL(existeParfait2(10, 200000000));
  EVAL((float) rand()/ RAND_MAX);
  EVAL((float) rand()/ RAND_MAX);
  EVAL((float) rand()/ RAND_MAX);
  dansCercle();
  monteCarlo();
  EVAL(parfaitSuiv(8129));
  integrale();
  EVAL(sontAmis(220, 284));
  EVAL(aUnAmi(220));
  EVAL(nemeParfait(2));
  vector<int> ta (3); ta.at(0) = 1; ta.at(1) = 2; ta.at(2) = 6;
  EVAL(ta);
  EVAL(ta.at(0));
  EVAL(taille(ta));
  EVAL(ta.at(2));
  EVAL( tableau({4,2,7}) );
  EVAL(somTab({ta}));
  EVAL(somTab({3,1,7,2,1}));
  EVAL(tabEgaux(ta, tableau({1,2,3})));
  EVAL(tabEgaux(ta, tableau({1,10, 9})));
  EVAL(tabEgaux(ta, tableau({1,10})));
  EVAL(tabEgaux(ta, tableau({1, 2, 6})));
  EVAL(tabCarre(4));
  EVAL(tabSuite(6));
  EVAL(tabEgaux(tabCarre(8), tabSuite(8)));
  EVAL(racEnt(25));
  EVAL(racEnt(27));
  EVAL(nbMaxLoc(ta));
  vector<int> poly1 = tableau( {3,0,2,0,1,0});
  vector<int> poly2 = tableau( {0,1,2,3,-1});
  ecrPoly(poly1);
  ecrPoly(poly2);
  EVAL(degree(poly1));
  EVAL(degree(poly2));
  ecrPoly(tableau({1, 5, 3, 2, 5, 5, 3, 0, 2, 9}));
  EVAL(degree(tableau({1, 5, 3, 2, 5, 5, 3, 0, 2, 9})));
  EVAL(valPoly(poly1, 1));
  EVAL(valPoly(poly2, 2));
  EVAL(difMin(ta));
  EVAL(estEquilibre(6));
  EVAL(estEquilibre(2));
  EVAL(estEquilibre(14));
  EVAL(estEquilibre(30));
  EVAL(estEquilibre(4));
  EVAL(estEquilibre(9));
  EVAL(estEquilibre(20));
  EVAL(liEquiInfV2(6));
  EVAL(liEquiInfV2(16));
  EVAL(liEquiInfV2(1));
  EVAL(liEquiInfV1(6));
  EVAL(liEquiInfV1(16));
  EVAL(liEquiInfV1(1));
  EVAL(liPremEqui(5));
  abs();
  EVAL(memeChiffre(13743));
  EVAL(estEquilibre2(2));
  EVAL(estEquilibre2(14));
  EVAL(estEquilibre2(30));
  EVAL(estEquilibre2(9));
  EVAL(liEquiInf3(6));
  EVAL(liEquiInf3(16));
  EVAL(liEquiInf4(6));
  EVAL(liEquiInf4(16));
  EVAL(liPremEqui2(2));
  EVAL(liPremEqui2(5));
  EVAL(contientEqui({12, 13, 6, 22, 8, 2, 11}));
  EVAL(contientEqui2({12, 13, 6, 22, 8, 2, 11}));
  EVAL(nbEqui({12, 13, 6, 22, 8, 2, 22}));
  EVAL(sousTabEqui({12, 13, 6, 22, 8, 2, 22}));
  EVAL(premierChiffre(57493));
  EVAL(moyennePresente({5, 6, 8, 4, 7}));
  EVAL(moyennePresente({1, 8, 10, 6, 2, 3}));
  EVAL(valMax({12, 13, 6, 22, 8, 2, 12}));
  EVAL(maxLiUnique({3, 7, 9, 2, 2, 7}));
  cout << "\n=================================================================\n ";
  return 0;
}
